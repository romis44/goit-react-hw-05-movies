{"version":3,"file":"static/js/812.80871798.chunk.js","mappings":"mNAEaA,EAAYC,EAAAA,GAAAA,KAAH,+FAcTC,EAAMD,EAAAA,GAAAA,IAAH,gDAIHE,EAASF,EAAAA,GAAAA,IAAH,mG,kBCfJ,SAASG,EAAT,GAA2B,IAAXC,EAAU,EAAVA,OACvBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,GACCA,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,eAAgBC,EAApC,EAAoCA,MAApC,OACT,yBACE,UAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMR,GAAYS,GAAE,kBAAaN,GAAhD,WACE,SAACN,EAAD,WACE,SAACD,EAAD,CACEc,IACEN,EAAW,yCAC2BA,GAClCO,EAENC,IAAKP,EACLQ,MAAM,MACNC,OAAO,WAGX,SAACpB,EAAD,UAAYY,QAdPH,EADA,KAqBlB,C,oGC9BYY,E,OAAYpB,GAAAA,GAAH,gF,oCCKP,SAASqB,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOlB,EAAP,KAAemB,EAAf,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAWA,OATAC,EAAAA,EAAAA,YAAU,WACRD,GAAW,IAEXE,EAAAA,EAAAA,MACGC,MAAK,SAAAC,GAAI,OAAIN,EAAUM,EAAKC,QAAnB,IACTC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IACXG,QAAQV,GAAW,GACvB,GAAE,KAGD,4BACGD,IAAW,SAACY,EAAA,EAAD,KACZ,SAAChB,EAAD,+BACC,SAACjB,EAAA,EAAD,CAAMC,OAAQA,MAGpB,C,+LCxBKiC,EAAW,+BACXC,EAAU,mCAEHX,EAAgB,mCAAG,oGACPY,EAAAA,EAAAA,IAAA,UAClBF,EADkB,uCACqBC,IAFd,cACxBE,EADwB,yBAIvBA,EAASX,MAJc,2CAAH,qDAOhBY,EAAc,mCAAG,WAAMC,GAAN,uFACLH,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iCACeC,EADf,kBACgCI,EADhC,+CADK,cACtBF,EADsB,yBAIrBA,EAASX,KAAKC,SAJO,2CAAH,sDAOda,EAAe,mCAAG,WAAMnC,GAAN,uFACN+B,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACA7B,EADA,oBACc8B,EADd,qBADM,cACvBE,EADuB,yBAItBA,EAASX,MAJa,2CAAH,sDAOfe,EAAe,mCAAG,WAAMC,GAAN,uFACNN,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAQ,EADA,4BAC2BP,EAD3B,oBADM,cACvBE,EADuB,yBAItBA,EAASX,KAAKiB,MAJQ,2CAAH,sDAOfC,EAAe,mCAAG,WAAMF,GAAN,uFACNN,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAQ,EADA,4BAC2BP,EAD3B,2BADM,cACvBE,EADuB,yBAItBA,EAASX,KAAKC,SAJQ,2CAAH,qD","sources":["components/List/List.styled.jsx","components/List/List.jsx","pages/HomePage/HomePage.styled.jsx","pages/HomePage/HomePage.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ListStyle = styled.span`\n  font-size: 15px;\n  font-weight: 500;\n  transition-duration: 0.5s;\n`;\n\n// export const Item = styled.li`\n//   transform: scale(1);\n//   transition: transform 250ms linear;\n//   &:hover {\n//     transform: scale(1.04);\n//   }\n// `;\n\nexport const Img = styled.img`\n  border-radius: 10px;\n`;\n\nexport const ImgBox = styled.div`\n  width: 300px;\n  height: 450px;\n  display: flex;\n  object-fit: cover;\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { ListStyle, Img, ImgBox } from './List.styled';\nimport image from '../../images/images.png';\n\nexport default function List({ movies }) {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies &&\n        movies.map(({ id, poster_path, original_title, title }) => (\n          <li key={id}>\n            <Link state={{ from: location }} to={`/movies/${id}`}>\n              <ImgBox>\n                <Img\n                  src={\n                    poster_path\n                      ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                      : image\n                  }\n                  alt={original_title}\n                  width=\"300\"\n                  height=\"300\"\n                />\n              </ImgBox>\n              <ListStyle>{title}</ListStyle>\n            </Link>\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n      original_title: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\nexport const TitleName = styled.h2`\n  text-align: center;\n  margin: 15px;\n  color: blue;\n`;\n","import { useState, useEffect } from 'react';\nimport { TitleName } from './HomePage.styled';\n\nimport { getTrendingMovie } from 'services/api';\nimport List from 'components/List/List';\nimport Loader from 'components/Loader';\n\nexport default function Homepage() {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getTrendingMovie()\n      .then(data => setMovies(data.results))\n      .catch(error => console.log(error))\n      .finally(setLoading(false));\n  }, []);\n\n  return (\n    <main>\n      {loading && <Loader />}\n      <TitleName>Trending Movies</TitleName>\n      {<List movies={movies} />}\n    </main>\n  );\n}\n","import axios from 'axios';\n\n// const API_KEY = 'ca6651118169730896bcd7a53aacb58e';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a2700da0d8f509f67de6165a96b841be';\n\nexport const getTrendingMovie = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getSearchMovie = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  return response.data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US&`\n  );\n  return response.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["ListStyle","styled","Img","ImgBox","List","movies","location","useLocation","map","id","poster_path","original_title","title","state","from","to","src","image","alt","width","height","TitleName","Homepage","useState","setMovies","loading","setLoading","useEffect","getTrendingMovie","then","data","results","catch","error","console","log","finally","Loader","BASE_URL","API_KEY","axios","response","getSearchMovie","query","getMovieDetails","getMovieCredits","movieId","cast","getMovieReviews"],"sourceRoot":""}